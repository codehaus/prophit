
-------------
Want to colorize the chart in other ways besides just call exclusive time
	  o method exclusive time
	  o method inclusive time
	  o threshold values & scaling should be parameterizable
	  o as should the colors?

Should be able to render parts of the diagram as wireframe... such as all calls
  whose exclusive time is below a threshold value. This would 
  potentially make the chart information more dense	  

-------------

Double-clicking on a cell in the caller/callee table should focus
  the application on the method associated with that cell, and hi-lite
  the calls of that method
Should use setSelectionMode to ensure that only 1 row can be selected
Detect a double-click event on the table and hi-lite the selected cell
  choose the one that is the child or parent of the current selectedCell
  set the child as the new renderRoot if it is not shown at all (e.g. if it is a caller
  of the current renderRoot)

if not ListSelectionEvent.getValueIsAdjusting()

see http://java.sun.com/docs/books/tutorial/uiswing/components/table.html#selection

Should hi-lite the blocks associated with the selected row in the caller and callee table

ListSelectionModel rowSM = table.getSelectionModel();
rowSM.addListSelectionListener(new ListSelectionListener() {                                                           

-------------

Change the behavior of block selection so that the other blocks which have the same RCC
  as the selected block are also high-lighted, in a different color (yellow?)

Need to be able to identify the master Method for a Call, then find all Calls 
  whose method is this master, then hi-lite them all
The calls are already indexed by their 'name' (OpenGL name, which is just an ID)
They could also be indexed by their master Method ID

BlockDiagramView:
  pick:
    methodKeyToCallListMap = renderer.getMethodKeyToCallListMap()

  drawSelected():
    selectedCall = model.getSelectedCall()
    drawSelected(selectedCall, Color.white)
    List calls = (List)methodKeyToCallListMap.get(selectedCall.getKey())
    for call in calls:
      if call != selectedCall:
        drawSelected(call, Color.yellow)

Call:
  int getMethodKey()

CallGraph:
  # Can use the same value as the key
  int getMethodKey(): return getKey()

CallGraph.CallImpl:
  int getMethodKey():
    return id.getRCC().getKey()

  

-------------

Need to tie the CallDetails into the GUI

Would be simple to make 3 tables : Summary Data, Callers, Callees
Each time the selected Call is changed, the models for each of these tables should be replaced...
  Presumably, can just use setModel to accomplish this

Need new events from the BlockDiagramModel:
  Use PropertyChangeSupport
  properties : numLevels, renderCall, selectedCall, mouseOverCall
  

-------------

'Properties' for a selected Call

callers, callees, nCalls, time, global %, local %

Callers, callees : 
  scan through the current block diagram
  need to identify matching Calls by their RCC (or RCC key)
  each time a matching call is found
    track the total nCalls and time for that RCC
    add its caller to the caller list, or add to the time for that caller
	add its callees to the caleee list, or add to the time for each callee

Then callers and callees can be rendered as a table:

Method : orbit.model.CallGraph.getChildren(CallGraph.java)
Inclusive Time : 20030
Exclusive Time : 3882
nCalls : 372
% of view  : 75.5%
% of total : 21.8%

Caller		 % time		 Callees		 % time


CallDetails:
	double inclusiveTime = 0
	double exclusiveTime = 0
	int nCalls = 0
	CallRollupList callersRollup = new CallRollupList()
	CallRollupList calleesRollup = new CallRollupList()
	
	CallDetails(Call root, Call selected):

		class SearchFor:	
			search(parent, call):
				match = false
				if ( call.getStackTraceID() == selected.getStackTraceID() ):
					match = true
					adapter.initialize(call)
					inclusiveTime += adapter.getInclusiveTime()
					exclusiveTime += adapter.getExclusiveTime()
					nCalls += call.getCallCount()
					if parent:
						callersRollup.add(parent):
				for child in call.children():
					if match:
						calleesRollup.add(child)
					search(call, child)

		SearchFor search = new SearchFor()
		search.search(null, root)

		callersRollup.sort()
		calleesRollup.sort()

	TableModel getCallersModel():
		return CallList(callersRollup)

	TableModel getCalleesModel():
		return CallList(calleesRollup)

	CallList(AbstractTableModel):
		CallList(CallRollupList):
			
		public int getRowCount():
			return list.size()
		
		public int getColumnCount():
			return 0
		
		public Object getValueAt(int row, int column):
			switch ( column ):
				case 0:
					return 
  

CallRollupList:
	HashMap timeByCall
	List    calls
	
	addCall(call):
		Double time = timeByCall.get(call.getName()))
		if ( time == null ):
			time = new Double(call.getTime())
		else:
			time = new Double(time.doubleValue() + call.getTime())
		timeByCall.put(call.getName(), time)

	sort():
		# sorts the calls by time
		List times = new List()
		calls.addAll(timeByCall.keySet())
		Collections.sort(calls, Comparator() { return getTime(first) < getTime(second) })

	Call getCall(int index):
		return calls.get(index)

	double getTime(int index):
		return getTime(getCall(index))

	int size():
		return calls.size()

	private double getTime(Call call):
		return timeByCall.get(call.getName()).doubleValue()

		
-------------

Want to be able to go back/forward/up/home using toolbar buttons

up is easy : 'p'
home is easy : 'r'
back/forward : need to store a history of rootRenderCalls, and have the ability to move backward and forward through the list

List rootRenderCalls
int  rootRenderIndex = -1

BlockDiagramModel(cg)
  setRenderCall(cg)

void setRenderCall(Call call):
	for ( int i = rootRenderCalls.size() - 1; i > rootRenderIndex; --i ):
		rootRenderCalls.remove(i)
	rootRenderCalls.add(call)
	nextRenderCall()

void getRenderCall(Call call):

boolean hasParentRenderCall():
	return getRenderCall().getParent() != null

void setRenderCallToParent():
	Call parent = getRenderCall().getParent()
	if ( parent != null ):
		setRenderCall(parent)

boolean hasNextRenderCall():
	return rootRenderCalls.size() - 1 > rootRenderIndex

void previousRenderCall():
	if ( !hasNextRenderCall() ):
		return
	++rootRenderIndex
	invalidate()

boolean hasPreviousRenderCall():
	return rootRenderIndex > 0

void previousRenderCall():
	if ( !hasPreviousRenderCall() ):
		return
	--rootRenderIndex
	invalidate()
		  
