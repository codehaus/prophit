
Product strategy
----------------

Profiler features:
CPU
Memory
Monitor (lock) contention
Call graph with time and % time
hotspots with callers, caller time, caller % time
remote processing launching
dynamically start/stop profiling (OptimizeIt)
servlet, JSP, app server integration
view source code
* Ant integration (havent seen this yet)
  e.g. get classpath, source path from Ant properties

Key metrics:
Time from desire to data
Ease of use
Ability to quickly find data that helps make the application faster
Types of applications served
Profile comparison

---------

LoaderFactory:
  Loader createLoader(file):
    Parser parser = ParserFactory.instance().createParser(file)
    Solver solver;
    if ( parser instanceof DashProfParser ):
      solver = new DashProfSolver()
    else if ( parser instanceof HProfParser ):
      solver = new HProfSolver()
    return new Loader(parser, solver)

# Have CallFractionSolver already
DashProfSolver:

HProfSolver:
  # Assign the call fractions based on the ratio of parent calls
  # Add the child call times to the parent call times

Loader:
  responsible for parsing and solving
  parser : reads the callIDs from the file and builds proxy calls
  solver : post-processes the lists of callIDs and constructs a call-graph
  loader : invokes first the solver and then the loader

  Loader(parser, solver):

  CallGraph load(File file):
    parser.execute()
    callIDs = parser.getCallIDs()
    proxyCallIDs = parser.getProxyCallIDs()
    CallGraph cg
    if ( !solver.cacheFileExists(file) ):
      cg = solver.solve()
      solver.writeToFile(cg)
    else:
      cg = solver.readFromFile(file)

Solver:
  boolean cacheFileExists(File):
  
  CallGraph solve():

  CallGraph readFromFile(File):

  writeToFile(CallGraph):

---------

parse java -Xrunhprof

Method of adding child call times to parent times doesn't quite work for proxies. Need to figure
  that out

Will need to distinguish between the 2 file types
Need to handle CPU TIME as well as CPU SAMPLES

Can use the thread=y option to further constrain the call graph
THREAD START (obj=89e2ad8, id = 3, name="main", group="main")
TRACE 129: (thread=3)
	  ...

Want to repeatedly match traces with parent traces in a greedy manner
n goes from 0 to nMax - 1
  as soon as a trace is matched to a parent or parents, it is not matched any more
  at each iteration, remove n + 1 entries from the stack trace of the called function
  map all the size nMax - ( n + 1 ) callees
  build the callIDs list
  remove all the ones that are 'root' (not found)
  At the end, merge the root back into the main list?
  sounds better to have a 'merge' option which merges into the existing list if possible
    (actually it already does that for non-proxy calls)

test with a file which had cpu profiling turned off

Existing algorithm should basically work, once the caller/callee notion is generalized to
include multi-call stacks

traces = []
key = 1

parseTrace(String line):
	tok = StringTokenizer(line)
	assert nextToken(tok, true) == 'TRACE'
	traceID = Integer.parseInt(nextToken(tok, true))
	ArrayList traceList = new ArrayList()
	while ( ( line = nextLine(false) ) != null &&
			!line.startsWith('TRACE') &&
			!line.startsWith('CPU') ):
		traceList.add(line.trim())
	traces[traceID] = traceList
	return line

parseSamples(String line):
	# Each the column header line
	line = nextLine(true)
	
	while ( ( line = nextLine(true) ) != null &&
			!line.startsWith("CPU") ):
		tok = StringTokenizer(line, ' ')
		# rank   self  accum   count trace method
		rank = nextToken(true)
		selfTime = nextToken(true)
		accum = nextToken(true)
		count = nextToken(true)
		traceID = nextToken(true)
		method = nextToken(true)
		trace = traces[traceID]
		rcc = RCC(trace, count, selfTime, key++)
		# Hash RCC by trace and parent trace

RCC:
  has simple caller/callee, callee used as the Call.getName()
  should introduce a StackTrace entity which represents the caller and callee?

  RCC(StackTrace stack, nCalls, time, key):
	  this.stack = stack
	  ...

  StackTrace getCallerStack():
	  return stack.popBottom(1)

  StackTrace getCalleeStack():
	  return stack.popTop(1)

  String getMethodDescription():
	  return stack.getLeafMethod()

StackTrace:
	String[] stack

	StackTrace(String[] stack):

	private StackTrace(String[] stack, int beginOffset, int endOffset):

	int hashCode():
		int code
		for ( int i = beginOffset; i < stack.size() - endOffset; ++i ):
			code += stack[i].hashCode()
		return code

	boolean equals(other):
		for ( int i = beginOffset; i < stack.size() - endOffset; ++i ):
			if !stack[i].equals(other.stack[i]):
				return false
		return true
	
	# Remove the top-most parent(s)
	# return null if the resulting stack is empty
	StackTrace popTop(int offset):
		if size() - offset <= 0:
			return null
		return StackTrace(stack, beginOffset, endOffset + offset)

	# Remove the bottom-most children(s)
	# return null if the resulting stack is empty
	StackTrace popBottom(int offset):
		if size() - offset <= 0:
			return null
		return StackTrace(stack, beginOffset + offset, endOffset)

	int size():
		return stack.length - beginOffset - endOffset;

	String getLeafMethod():
		return stack[beginOffset]

Ampl input:

Need to provide:
list of rccs
  - which are referenced by a member of I
  - which are a parent of a member of I
time and nCalls for each rcc
list of I, where each I is an instantiation of an RCC whose parent is an RCC
  the parents should be the list of RCCs which are hashed by the callers of I

for each r in RCCs:
	get the list of RCCs with callee == r.caller
	if the list has multiple entries:
		for each entry:
			create an Invocation
			add the RCC and the parent RCC of the Invocation to the RCC list

RCC ids [ 0 ... N ]
Invocation ids [ N + 1 ... M ]

CallGraph:
	CallGraph(CallID[] calls):
		# Each CallID should already be indexed by its ID in 'calls'
		# Should be no CallID for RCCs which are replaced by invocations
		# Can also map from the key of each CallID to its parent RCC callID
		#   Only used for navigating down to children. Parents should always be
		#   constructed by popping a Call
		for call in calls:
			parents[call.getKey()] = call.getParentRCCKey()

RCC
  caller
  callee
  time
  nCalls

CallID:
  RCC rcc
  RCC parent
  int key (either an RCC id or an Invocation ID)

  public getParentRCCKey():
	  return parent.getKey()

Call:
  # call to either an RCC or an Invocation
  CallID callID

  Call getParent:

Parser should first create a CallID for each RCC
Then the CallIDs for the invocations
	  

Parse the file into rccs and instances

rcc : a line read from the data file
instance : an instantiation of an rcc for a particular location in the call graph

parse each line into an rcc
  caller, callee, nCalls, time
build a map of callee -> list of rcc

rccs:

main
init
DBExec
insert
update
append

( multi-map entries only )
map : ( append : update->append, insert->append, DBExec : init->DBExec, test->DBExec )

for each rcc, build a set of 'call paths' by traversing towards the root of the graph
  ( keep track of root rccs, those whose parent is not found )
  each call path uniquely identifies an instance
  removing the head from the call path identifies the parent instance
  a call path is a list of rccs
  it doesn't matter what order the rccs are parsed into instances

main : root
append -> ( update->append, DBExec->update, init->DBExec, init->main )
          ( insert->append, DBExec->insert, init->DBExec, init->main )
          ( update->append, DBExec->update, test->DBExec, test->main )
          ( insert->append, DBExec->insert, test->DBExec, test->main )
init -> main
test -> main

Assign a unique (integer) key to each call path

Need to build 2 data structures from instances:
  instanceID -> parent instanceID
  instanceID -> rcc ID

instances:
main
  init
    DBExec
      insert
        append
      update
        append
  test
    DBExec
      insert
        append
      update
        append
  


Parse the data file into a hierarchy of method calls with:
  method name
  measures:
    # of invocations
    amount of time spent in call
    average time per call
    distribution of time?
  measure as a % of the measure in the parent

display as:
nested rectangles, in proportion to the amount of time spent

file format:
space-delimited
should have first row 'count callee caller time'
each line is parsed out by spaces
build a bi-directional tree out of the entries

Qs:

How are the rectangles divided up among the parent real estate?
Greedy left-to-right, top-to-bottom
How are they dimensioned?
  Know the total amount of space that is going to be occupied by all the child rectangles
  Draw a rectangle with the measure, + a fraction of the 'empty space'
  center the rectangle within that allocation
  consume space so as to minimize the aspect ratio of the rectangles

# Determines the location of a shape (rectangle) on the graph
class Layout
  - flyweight?
  - rectangle
  hierarchy level?
  initialize(Invocation invocation)
  Rectangle getExtent(Point origin)
  int       getDepth(int rootLevel)

class BoxRenderer
  - flyweigtht?
  initialize(Invocation)
  render(Rectangle extent, int depth)


DemoBoxRenderer
  - put the origin at 0,0 and render in the x-y plane
  - orthographic projection 
  - default scaling should be to fit the root-level rectangle into the view
  - aspect ratio of the orthographic project should match the screen aspect ratio
    actually it might make sense to let the user scale the screen to best fit the data in
  - use an arbitrary 0 -> 1 (n?) scale for the rectangle, e.g. start with a square and sub-divide
  - zoom and scale by changing the projection coordinates and extent


b : c [ 50 ]
b : d [ 5 ]
a : b [ 10 ]
a : x [ 10 ]


roots : x, c, d

b called by c, d
a called by b from c and d, and by x

c(50)
 b(50)
  a(9)
d(5)
 b(5)
  a(1)
x(10)
 a(10)
