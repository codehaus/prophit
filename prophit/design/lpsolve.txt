
Migrate the NEOS non-linear solver to a Linear Programming solver (lpsolve)

Current solution
----------------
the NEOS solver formulates the problem as:

minimize:
  error across all Instances I
  where error   = ( measure - idealMeasure )^2
		  measure	   = assigned fraction 'f'
		  idealMeasure = number of invocations of parent(I) / sum of number of invocations of parent(J) across all
							  invocations J for whom parent(J) = parent(I)

subject to
  sum of all f for all I with the same RCC 'R' == 1
  sum of the computed times for all I whose parent is R <= time(R) * FUDGE_FACTOR (1.03)

This formulation is non-linear because of the power of 2 (^2) in the minimization function

Proposed solution is to introduce, for each instance I, a new set of dummy variables X.

minimize:
  sum of all X

subject to:
  x >= measure - idealMeasure
  x >= idealMeasure - measure
  plus the original constraints
  
The two inequality constraints on x ensure that x is always positive. The optimal solution has the smallest sums of all Xes. X will be assigned to the absolute value of the difference between the measure and the idealMeasure

Given a simple problem with RCCs:

name	nCalls	time		caller
----	------	----		------
root	1			3			-
init	1			1			root
load	2			2			root
exec	1			1			init
exec	2			2			load
store	3			3			exec

The call graph is:

root
  init
    exec(1)
	   store
  test
    exec(2)
	   store

the 'store' function must be divided between exec1 = ( init, exec ) and exec2 = ( test, exec ) according to the nCalls on 'init' and 'test'. In this case, 1/3 of the time should be assigned to exec1 and 2/3 should be assigned to exec2.

RCCs:
name	  nCalls	 time
----	  ------	 ----
exec1	  1		 1		
exec2	  2		 2		
store	  3		 3		

I:
rcc	  name	 parentRCC
---	  ----	 ---------
store	  store1  exec1
store	  store2  exec2

X:
x(store1) = x1
x(store2) = x2

F:
f1
f2

minimize:
x1 + x2

subject to:
x1 >= f(store1) - parentRCC(store1).nCalls / ( parentRCC(store1).nCalls + parentRCC(store2).nCalls )
  or equivalently:
  x1 - f(store1) >= - parentRCC(store1).nCalls / ( parentRCC(store1).nCalls + parentRCC(store2).nCalls )
x1 + f(store1) >= parentRCC(store1).nCalls / ( parentRCC(store1).nCalls + parentRCC(store2).nCalls )
x2 - f(store2) >= parentRCC(store2).nCalls / ( parentRCC(store1).nCalls + parentRCC(store2).nCalls )
x2 + f(store2) >= parentRCC(store2).nCalls / ( parentRCC(store1).nCalls + parentRCC(store2).nCalls )

f(store1) + f(store2) = 1
f(store1) * rcc(store1).time + f(store2) * rcc(store2).time <= parentRCC(store1).time - ( other singular child RCCs of parentRCC )
f(store1) * rcc(store1).time + f(store2) * rcc(store2).time <= parentRCC(store2).time - ( other singular child RCCs of parentRCC )
			 this constraint is redundant with the one above because parentRCC(store1) == parentRCC(store2)

Matrix formulation:
variables are:
x1		x2		f1		 f2

minimize  x1 + x2:
1		1		0		 0

subject to constraints:
1		0	  -1		 0		>= -1/3
1		0	  1		 0		>= 1/3
0		1	  0		 -1	>= -2/3
0		1	  0		 1		>= 2/3
0		0	  1		 1		=	1
0		0	  3		 3		<=	3

----------

Generic formulation and invocation of the lp_solve solver

Variables:
for each proxy call ID:
	 x, f

minimization expression : minimize the sum of all X

2 constraints for each X to enforce the absolute value condition
for each RCC with proxy calls:
	 sum(f) = 1
	 sum of the times of the proxy calls and the non-proxy child calls <= RCC.time
