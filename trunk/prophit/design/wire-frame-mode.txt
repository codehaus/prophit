
see web/product-plan.html#wire_frame

orbit.gui.ColorModel
orbit.gui.Constants
orbit.gui.tower.AbstractTowerImageComponent
orbit.gui.tower.AbstractDisplayListComponent
orbit.gui.tower.BlockRenderer
orbit.gui.tower.TowerDiagramSolid
orbit.gui.tower.TowerDiagramWireFrame
orbit.gui.tower.TowerImageComponent

interface TowerImageComponent:
	public void setColorModel(ColorModel cm)
	
	public void setModel(BlockDiagramModel model):

	# Draw the image component
	public void render(canvas, gl, glu, glut)

class AbstractTowerImageComponent(TowerImageComponent):
	private ColorModel cm
	private BlockDiagramModel model

	public void setColorModel(ColorModel cm):
		this.cm = cm
	
	public void setModel(BlockDiagramModel model):
		this.model = model
		addListeners()

	protected abstract void paintComponent(canvas, gl, glu, glut):

	protected abstract void addListeners():

class AbstractDisplayListComponent(AbstractDiagramComponent):
	private boolean invalid = true
	private int list = -1

	public void setModel(BlockDiagramModel model):
		super.setModel(model)
		invalidate()

	public void render(canvas, gl, glu, glut):
		if invalid:
			if list == -1:
				# create list
			else:
				# delete list
			paintComponent(canvas, gl, glu, glut)

		renderDisplayList(canvas, gl, glu, glut)

	protected void renderDisplayList(canvas, gl, glu, glut):
		gl.glCallList(list);

	# Ensure that the display list will be re-created before the next rendering
	protected void invalidate():
		invalid = true

class TowerDiagramWireFrame(AbstractDisplayListComponent):
	protected void addListeners():
		model.addListener(public void propertyChange(PropertyChangeEvent evt):
						  # See BlockDiagramView listener)
						  )

	public void paintComponent(canvas, gl, glu, glut):
		Rectangle2D.Double rootRectangle = new Rectangle2D.Double(0, 0, EXTENT, EXTENT);
		CallLayoutAlgorithm layout = new CallLayoutAlgorithm(new CallAdapter(model.getRootRenderState().getRenderCall()),
															 measure,
															 model.getLevels(),
															 rootRectangle);
		renderer = new BlockRenderer(gl, BlockRenderer.RENDER_WIREFRAME, colorModel);

		if model.isWireframe():
			renderer.addSolidBlock(model.getMouseOverCall())
			for name in model.getNameSearchNames():
				renderer.addSolidBlocks(model.getCallsByName(name))
			if model.getSelectedCall() != null:
				renderer.addSolidBlock(model.getSelectedCall())
				renderer.addSolidBlocks(model.getCallsByName(model.getSelectedCall().getName()))

		layout.setCallback(renderer);
		
		gl.glDisable(GL_DITHER);
		gl.glDisable(GL_LIGHTING);
		gl.glDisable(GL_CULL_FACE);

		layout.execute();
		

class TowerDiagramSolid(AbstractDisplayListComponent):
	public void paintComponent(canvas, gl, glu, glut):
		Rectangle2D.Double rootRectangle = new Rectangle2D.Double(0, 0, EXTENT, EXTENT);
		CallLayoutAlgorithm layout = new CallLayoutAlgorithm(new CallAdapter(model.getRootRenderState().getRenderCall()),
															 measure,
															 model.getLevels(),
															 rootRectangle);
		renderer = new BlockRenderer(gl, BlockRenderer.RENDER_SOLID, colorModel);
		layout.setCallback(renderer);
		
		gl.glEnable(GL_DITHER);
		gl.glEnable(GL_LIGHTING);
		gl.glEnable(GL_CULL_FACE);

		layout.execute();

		model.setGLNameToCallMap(renderer.getGLNameToCallMap());
		model.setNameToCallListMap(renderer.getNameToCallListMap());
		
class BlockRenderer:
	HashSet solidCalls = null
	
	addSolidBlocks(List calls):
		for call in calls:
			addSolidBlock(call)
		
	addSolidBlock(Call call):
		if solidCalls == null:
			solidCalls = new HashSet()
		solidCalls.add(call)
	
	public boolean beginCall(CallAdapter call, Rectangle2D.Double rectangle, int depth):
		if size < SIZE_THRESHOLD: return false

		if renderMode == RENDER_SOLID || ( solidCalls != null && solidCalls.contains(call.getCall()) ):
			renderAsQuads()
		else // if renderMode == RENDER_WIREFRAME
			renderAsLines()
			
		return true

	protected void renderAsQuads(CallAdapter call, Rectangle2D.Double rectangle, int depth, Color color):
		# Shouldn't need to render the lines around the tops of the blocks, b/c they will be rendered
		#   by the TowerDiagramWireFrame
		
	
