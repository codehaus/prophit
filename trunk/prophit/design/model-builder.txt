
Design for a ModelBuilder interface that can be used to unify the Parser implementations

Parts that will remain parser-specific:
o Reading the file format
o Order of construction of StackTrace, RCC, and CallID objects?
  DashProf does them at the same time
  HProf reads all the StackTraces (each of which has an ID), then constructs the RCCs
    by referencing the StackTraces
o Both parsers use the ConstructCallsAlgorithm to construct the CallIDs
  HProf uses it repeatedly, DashProf only uses it once
o What about filling in missing StackTraces? Currently done by HProfParser, could it be
  done generically by ModelBuilder? Need to analyze this algorithm
o generic 'Solver' is not really needed. There are two cases that are important:
  file contains exclusive times (e.g. HProf)
    can simply solve proxy calls by assigning fractions according to the number of parent invocations
  file contains inclusive times (e.g. DashProf)
    Need to use the LP solver
o Can move the 'fraction' values to data members on CallID?
o CallID should keep track of inclusive and exclusive time?

interface ModelBuilder:
	initialize(TimeMeasure):
		keep track of which Solver to use at the end of parsing

	ID newStackTrace(String[] stackArray):
		look up each of the stackArray elements in a String table
		construct the StackTrace and return an ID that identifies it
		or just return the StackTrace?

	void newRecordedCall(ID, callCount, time):
		look up the StackTrace
		construct a new RCC
		add it to the list

	void end():
		construct the callIDs

	public interface ID:
		public int hashCode()
		public boolean equals(other)
		public String toString()

	private class StackTraceID(ID):
		public int hashCode():  return st.hashCode()
		public boolean equals(other): return st.equals(other)
		public String toString(): return st.toString()
